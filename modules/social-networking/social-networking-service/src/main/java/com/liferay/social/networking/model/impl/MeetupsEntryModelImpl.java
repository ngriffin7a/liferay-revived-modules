/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.social.networking.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.social.networking.model.MeetupsEntry;
import com.liferay.social.networking.model.MeetupsEntryModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MeetupsEntry service. Represents a row in the &quot;SN_MeetupsEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MeetupsEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MeetupsEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MeetupsEntryImpl
 * @generated
 */
public class MeetupsEntryModelImpl
	extends BaseModelImpl<MeetupsEntry> implements MeetupsEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a meetups entry model instance should use the <code>MeetupsEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "SN_MeetupsEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"meetupsEntryId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"title", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"startDate", Types.TIMESTAMP}, {"endDate", Types.TIMESTAMP},
		{"totalAttendees", Types.INTEGER}, {"maxAttendees", Types.INTEGER},
		{"price", Types.DOUBLE}, {"thumbnailId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("meetupsEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("totalAttendees", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("maxAttendees", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("price", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("thumbnailId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SN_MeetupsEntry (meetupsEntryId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,title VARCHAR(75) null,description VARCHAR(75) null,startDate DATE null,endDate DATE null,totalAttendees INTEGER,maxAttendees INTEGER,price DOUBLE,thumbnailId LONG)";

	public static final String TABLE_SQL_DROP = "drop table SN_MeetupsEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY meetupsEntry.startDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SN_MeetupsEntry.startDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long USERID_COLUMN_BITMASK = 2L;

	public static final long STARTDATE_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public MeetupsEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _meetupsEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMeetupsEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _meetupsEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MeetupsEntry.class;
	}

	@Override
	public String getModelClassName() {
		return MeetupsEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MeetupsEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MeetupsEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MeetupsEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MeetupsEntry)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MeetupsEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MeetupsEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MeetupsEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MeetupsEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MeetupsEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, MeetupsEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			MeetupsEntry.class.getClassLoader(), MeetupsEntry.class,
			ModelWrapper.class);

		try {
			Constructor<MeetupsEntry> constructor =
				(Constructor<MeetupsEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<MeetupsEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<MeetupsEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<MeetupsEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<MeetupsEntry, Object>>();
		Map<String, BiConsumer<MeetupsEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<MeetupsEntry, ?>>();

		attributeGetterFunctions.put(
			"meetupsEntryId", MeetupsEntry::getMeetupsEntryId);
		attributeSetterBiConsumers.put(
			"meetupsEntryId",
			(BiConsumer<MeetupsEntry, Long>)MeetupsEntry::setMeetupsEntryId);
		attributeGetterFunctions.put("companyId", MeetupsEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<MeetupsEntry, Long>)MeetupsEntry::setCompanyId);
		attributeGetterFunctions.put("userId", MeetupsEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<MeetupsEntry, Long>)MeetupsEntry::setUserId);
		attributeGetterFunctions.put("userName", MeetupsEntry::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<MeetupsEntry, String>)MeetupsEntry::setUserName);
		attributeGetterFunctions.put("createDate", MeetupsEntry::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<MeetupsEntry, Date>)MeetupsEntry::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", MeetupsEntry::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<MeetupsEntry, Date>)MeetupsEntry::setModifiedDate);
		attributeGetterFunctions.put("title", MeetupsEntry::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<MeetupsEntry, String>)MeetupsEntry::setTitle);
		attributeGetterFunctions.put(
			"description", MeetupsEntry::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<MeetupsEntry, String>)MeetupsEntry::setDescription);
		attributeGetterFunctions.put("startDate", MeetupsEntry::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate",
			(BiConsumer<MeetupsEntry, Date>)MeetupsEntry::setStartDate);
		attributeGetterFunctions.put("endDate", MeetupsEntry::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate",
			(BiConsumer<MeetupsEntry, Date>)MeetupsEntry::setEndDate);
		attributeGetterFunctions.put(
			"totalAttendees", MeetupsEntry::getTotalAttendees);
		attributeSetterBiConsumers.put(
			"totalAttendees",
			(BiConsumer<MeetupsEntry, Integer>)MeetupsEntry::setTotalAttendees);
		attributeGetterFunctions.put(
			"maxAttendees", MeetupsEntry::getMaxAttendees);
		attributeSetterBiConsumers.put(
			"maxAttendees",
			(BiConsumer<MeetupsEntry, Integer>)MeetupsEntry::setMaxAttendees);
		attributeGetterFunctions.put("price", MeetupsEntry::getPrice);
		attributeSetterBiConsumers.put(
			"price", (BiConsumer<MeetupsEntry, Double>)MeetupsEntry::setPrice);
		attributeGetterFunctions.put(
			"thumbnailId", MeetupsEntry::getThumbnailId);
		attributeSetterBiConsumers.put(
			"thumbnailId",
			(BiConsumer<MeetupsEntry, Long>)MeetupsEntry::setThumbnailId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getMeetupsEntryId() {
		return _meetupsEntryId;
	}

	@Override
	public void setMeetupsEntryId(long meetupsEntryId) {
		_meetupsEntryId = meetupsEntryId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@Override
	public int getTotalAttendees() {
		return _totalAttendees;
	}

	@Override
	public void setTotalAttendees(int totalAttendees) {
		_totalAttendees = totalAttendees;
	}

	@Override
	public int getMaxAttendees() {
		return _maxAttendees;
	}

	@Override
	public void setMaxAttendees(int maxAttendees) {
		_maxAttendees = maxAttendees;
	}

	@Override
	public double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(double price) {
		_price = price;
	}

	@Override
	public long getThumbnailId() {
		return _thumbnailId;
	}

	@Override
	public void setThumbnailId(long thumbnailId) {
		_thumbnailId = thumbnailId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), MeetupsEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MeetupsEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MeetupsEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MeetupsEntryImpl meetupsEntryImpl = new MeetupsEntryImpl();

		meetupsEntryImpl.setMeetupsEntryId(getMeetupsEntryId());
		meetupsEntryImpl.setCompanyId(getCompanyId());
		meetupsEntryImpl.setUserId(getUserId());
		meetupsEntryImpl.setUserName(getUserName());
		meetupsEntryImpl.setCreateDate(getCreateDate());
		meetupsEntryImpl.setModifiedDate(getModifiedDate());
		meetupsEntryImpl.setTitle(getTitle());
		meetupsEntryImpl.setDescription(getDescription());
		meetupsEntryImpl.setStartDate(getStartDate());
		meetupsEntryImpl.setEndDate(getEndDate());
		meetupsEntryImpl.setTotalAttendees(getTotalAttendees());
		meetupsEntryImpl.setMaxAttendees(getMaxAttendees());
		meetupsEntryImpl.setPrice(getPrice());
		meetupsEntryImpl.setThumbnailId(getThumbnailId());

		meetupsEntryImpl.resetOriginalValues();

		return meetupsEntryImpl;
	}

	@Override
	public int compareTo(MeetupsEntry meetupsEntry) {
		int value = 0;

		value = DateUtil.compareTo(getStartDate(), meetupsEntry.getStartDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MeetupsEntry)) {
			return false;
		}

		MeetupsEntry meetupsEntry = (MeetupsEntry)object;

		long primaryKey = meetupsEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalCompanyId = _companyId;

		_setOriginalCompanyId = false;

		_originalUserId = _userId;

		_setOriginalUserId = false;

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MeetupsEntry> toCacheModel() {
		MeetupsEntryCacheModel meetupsEntryCacheModel =
			new MeetupsEntryCacheModel();

		meetupsEntryCacheModel.meetupsEntryId = getMeetupsEntryId();

		meetupsEntryCacheModel.companyId = getCompanyId();

		meetupsEntryCacheModel.userId = getUserId();

		meetupsEntryCacheModel.userName = getUserName();

		String userName = meetupsEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			meetupsEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			meetupsEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			meetupsEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			meetupsEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			meetupsEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		meetupsEntryCacheModel.title = getTitle();

		String title = meetupsEntryCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			meetupsEntryCacheModel.title = null;
		}

		meetupsEntryCacheModel.description = getDescription();

		String description = meetupsEntryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			meetupsEntryCacheModel.description = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			meetupsEntryCacheModel.startDate = startDate.getTime();
		}
		else {
			meetupsEntryCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			meetupsEntryCacheModel.endDate = endDate.getTime();
		}
		else {
			meetupsEntryCacheModel.endDate = Long.MIN_VALUE;
		}

		meetupsEntryCacheModel.totalAttendees = getTotalAttendees();

		meetupsEntryCacheModel.maxAttendees = getMaxAttendees();

		meetupsEntryCacheModel.price = getPrice();

		meetupsEntryCacheModel.thumbnailId = getThumbnailId();

		return meetupsEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MeetupsEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MeetupsEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MeetupsEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((MeetupsEntry)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<MeetupsEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<MeetupsEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MeetupsEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((MeetupsEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MeetupsEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _meetupsEntryId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _title;
	private String _description;
	private Date _startDate;
	private Date _endDate;
	private int _totalAttendees;
	private int _maxAttendees;
	private double _price;
	private long _thumbnailId;
	private long _columnBitmask;
	private MeetupsEntry _escapedModel;

}